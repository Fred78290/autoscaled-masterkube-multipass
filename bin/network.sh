#===========================================================================================================================================
#
#===========================================================================================================================================
function valid_ip()
{
    local  IP=$1
    local  RESULT=NO

    if [[ $IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        IFS='.' read -a IP <<< "${IP}"

        if [[ ${IP[0]} -le 255 && ${IP[1]} -le 255 && ${IP[2]} -le 255 && ${IP[3]} -le 255 ]]; then
			RESULT=YES
		fi
    fi

    echo -n ${RESULT}
}

#===========================================================================================================================================
#
#===========================================================================================================================================
function nextip()
{
	local IP=$1

	if [ "${IP}" == "DHCP" ] || [ "${IP}" == "NONE" ]; then
		echo "${IP}"
	else
		local IP_HEX=$(printf '%.2X%.2X%.2X%.2X\n' `echo ${IP} | tr '.' ' '`)
		local NEXT_IP_HEX=$(printf %.8X `echo $(( 0x${IP_HEX} + 1 ))`)
		local NEXT_IP=$(printf '%d.%d.%d.%d\n' `echo ${NEXT_IP_HEX} | sed -r 's/(..)/0x\1\ /g'`)

		echo "${NEXT_IP}"
	fi
}

#===========================================================================================================================================
#
#===========================================================================================================================================
function cidr_to_netmask() {
	local CIDR=$1

	value=$(( 0xFFFFFFFF ^ ((1 << (32 - ${CIDR})) - 1) ))
	echo "$(( (value >> 24) & 0xff )).$(( (value >> 16) & 0xff )).$(( (value >> 8) & 0xff )).$(( value & 0xff ))"
}

#===========================================================================================================================================
#
#===========================================================================================================================================
function ipv4() {
	local INF=$1
	local LOCAL_IPADDR=

	if [ "${OSDISTRO}" == "Darwin" ]; then
		read -a LOCAL_IPADDR <<< "$(ifconfig ${INF} | grep -m 1 "inet\s" | sed -n 1p)"
	else
		read -a LOCAL_IPADDR <<< "$(ip addr show ${INF} | grep -m 1 "inet\s" | tr '/' ' ')"
	fi

	echo -n "${LOCAL_IPADDR[1]}"
}
